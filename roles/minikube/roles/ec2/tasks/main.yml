- name: Create ec2 instance for Kubernetes
  ec2:
    key_name: "{{ sshkey }}"
    group: "{{ ec2SG }}"
    instance_type: "{{ instype }}"
    image: "{{ ami[region] }}"
    wait: true
    region: "{{ region }}"
    vpc_subnet_id: "{{ ec2subnet[region] }}"
    assign_public_ip: yes
    instance_tags: "{{ mytags }}"
  when: groups['kube'] | length == 0
  register: ec2instance

- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 30
    timeout: 120
  when: groups['kube'] | length == 0
  with_items: "{{ ec2instance.instances }}"

- name: Check if we have EIP
  ec2_eip_facts:
    filters:
      instance-id: "{{ hostvars[groups['kube'][0]].instance_id }}"
  register: existing_eip
  ignore_errors: true

- name: allocate a new elastic IP inside a VPC in us-west-2
  ec2_eip:
    device_id: "{{ item.id }}"
    region: "{{ region }}"
    reuse_existing_ip_allowed: yes
    state: present
    in_vpc: yes
  with_items: "{{ ec2instance.instances }}"
  register: eip
  when: not existing_eip

- name: Add to inventory
  lineinfile:
    dest: "{{ playbook_dir }}/environments/{{ ec2env }}/hosts"
    insertafter: '^\[kube\]'
    line: "{{ item.public_ip }} instance_id={{ item.id }}"
  when: groups['kube'] | length == 0
  with_items: "{{ ec2instance.instances }}"

- name: Refresh inventory
  meta: refresh_inventory

- name: Wait for update
  pause:
    minutes: 1
  when: groups['kube'] | length == 0


- name: Add DNS entries
  route53:
    state: present
    zone: grads.al-labs.co.uk
    record: kube.grads.al-labs.co.uk
    type: A
    ttl: 60
    value:
      - "{{ groups['kube'][0] }}"

- name: Add wildcard DNS
  route53:
    state: present
    zone: grads.al-labs.co.uk
    record: "*.kube.grads.al-labs.co.uk"
    type: PTR
    ttl: 60
    value:
      - kube.grads.al-labs.co.uk
